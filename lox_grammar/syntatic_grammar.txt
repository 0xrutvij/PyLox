
********************************
********* Expressions **********
********************************

Literals: Numbers, strings, Booleans, and nil.

Unary expressions: A prefix ! to perform logical not, and - to negate a number.

Binary expressions: The infix arithmetic (+, -, *, /) and logic operators (==, !=, <, <=, >, >=)

Parentheses: A pair of ( and ) wrapped around an expression.

expression --> literal
             | unary
             | binary
             | grouping ;

literal    --> NUMBER | STRING | "true" | "false" | "nil" ;
grouping   --> "(" expression ")" ;
unary      --> ("-" | "!") expression ;
binary     --> expression operator expression ;
operator   --> "==" | "!=" | "<" | "<=" | ">" | ">="
             | "+"  | "-"  | "*" |  "/" ;

*********************************************
********* Expressions & Precedence **********
*********************************************

expression --> assignment;

assignment --> IDENTIFIER "=" assignment
             | equality;

equality   --> comparison ( ( "!=" | "==" ) comparison )* ;

comparison --> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term       --> factor ( ( "-" | "+" ) factor )* ;

factor     --> unary ( ( "/" | "*" ) unary )* ;

unary      --> ( "!" | "-" ) unary
             | primary;

primary    --> NUMBER | STRING | "true" | "false" | "nil"
             | "(" expression ")"
             | IDENTIFIER ;



********************************
********** Statements **********
********************************

program   --> statement* EOF ;

statement --> exprStmt
            | printStmt ;

exprStmt  --> expression ";" ;

printStmt --> "print" expression ";" ;



********************************
********** Declrations *********
********************************

program     --> declaration* EOF ;

declaration --> varDecl
              | statement;

statement   --> exprStmt
              | printStmt ;

varDecl     --> "var" IDENTIFIER ( "=" expression )? ";" ;


